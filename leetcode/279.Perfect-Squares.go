// 对于分割类问题（钱币找零），dp的状态转移方程通常并不依赖相邻
// 位置，而是依赖于满足分割条件的位置。定义一个以为矩阵dp，dp[i]
// 表示i最少可由几个平方数相加构成，本题中，位置i只依赖只依赖i-k^2
// 的位置，如i-1、i-4、i-9等等，才能满足完全平方分割的条件，因此
// dp[i] = 1 + min{dp[i-1],dp[i-4],dp[i-9]...},下标须>0
// btw: 此题对于完全平方数，dp[i] = 1（4=2^2）
func numSquares(n int) int {
    if n <= 0 {
        return 0
    }
    dp := make([]int, n+1)
    // 注意：dp[0]需保留，因对于本身为完全平方数的i, i-k^2=0
    // 刚好可使用dp[i]为0时统一代码形式
    for i := 1; i <= n; i++ {
        dp[i] = n // 初始化为一个较大值，设置的值满足后续比较即可
    }
    
    for i := 1; i <= n; i++ {
        for j := 1; j*j <= i; j++ {
            if dp[i-j*j]+1 < dp[i] {
                dp[i] = dp[i-j*j]+1
            }
        }
    }
    
    return dp[n]
}
